#+title: Advent of Code
#+author: Bartev
#+date: 2024-01-27

I'm basing the structure of this repo (=*.edn= files, etc) off of [[https://github.com/tschady/advent-of-code/tree/main][tschady's repo]].

* Introduction

- 2024-12-01 This year I'm using python.
  I'm still using the clojure scripts (babashka) to download the data and setup initial files.

- 2023 My Clojure solutions to the [[https://adventofcode.com][Advent of Code]] challenge (to be reused over multiple years).

* Structure

** Babashka scripts

Handy scripts (thanks tschady) are in =script=.

=bb.edn= defines tasks that call them.

e.g. To create stub files for 2023 day 7, download the data to =resources/day07.txt= and open the websites for the problem and data, run:

#+begin_example
  bb go -y 2023 -d 7
#+end_example

or, if you want to use the current date, just run

#+begin_example
  bb go
#+end_example

- Make sure to update the =AOC_SESSION= cookie annually (expires after ~1 month)
[[https://github.com/wimglenn/advent-of-code-wim/issues/1]]

** Clojure
*** Basic setup

Use =deps.edn= to define dependencies and paths.

Files in =src= and =resources= can be found during runtime.

Tests use file in =test=.

*** Tests

Tests are under =tests=.

Tests use =kaocha= (not sure how this works yet).

=kaocha= recommends setting up test configs in =tests.edn=.

Run with

#+begin_example
  bb test
#+end_example

* Running code

** Clojure

** Python

*** I'm using =uv= to manage the environment.

#+begin_src shell :results verbatim
  uv venv
  source .venv/bin/activate
#+end_src

*** To add more dependencies,
#+begin_src shell :results verbatim
  uv add new_package
  uv sync
#+end_src

*** For an editable install of the current package
(to add utility functions)

#+begin_src shell :results verbatim
  uv pip install -e .
#+end_src

* Learnings

** Clojure
*** Transducers
[[https://clojure.org/reference/transducers]]

**** Reducing function
The kind of function you'd pass to =reduce=
Takes an accumulated result and a new input and returns a new accumulated result.

**** Transducer (=xform= or =xf=)
A transformation from one reducing function to another.

Examples
#+begin_src clojure
  (filter odd?) ;; returns a transducer that filters odd
  (map inc)     ;; returns a mapping transducer for incrementing
  (take 5)      ;; returns a transducer that will take the first 5 values
#+end_src
**** Compose with =comp=
Use the existing =comp= function.
=comp= applies the rightmost function to the parameters, then the next rightmost function to the result, and so on.

#+begin_src clojure
  (def xf
    (comp
     (filter odd?)
     (map inc)
     (take 5)))
#+end_src

The transformation above is equivalent to the sequence transformation
#+begin_src clojure
  (->> coll
       (filter odd?)
       (map inc)
       (take 5))
#+end_src
** Python
*** I always forget the collections package
- 2024 day 1, to make a =Counter= from a list
  #+begin_src python
    from collections import Counter

    xs = [1, 2, 1, 3, 1, 4]
    counts = Counter(xs)

    # Counter({1: 3, 2: 1, 3: 1, 4: 1})
  #+end_src
*** Remember regex syntax
- 2024 day 3, to find all matches and groups
